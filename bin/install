#!/usr/bin/env bash

set -euo pipefail

current_script_path=${BASH_SOURCE[0]}
plugin_dir=$(dirname "$(dirname "$current_script_path")")

# TODO: Ensure this is the correct GitHub homepage where releases can be downloaded for watchman.
GH_REPO="https://github.com/facebook/watchman"
TOOL_NAME="watchman"
TOOL_TEST="watchman version"

fail() {
  echo -e "asdf-$TOOL_NAME: $*"
  exit 1
}

curl_opts=(-fsSL)

# NOTE: You might want to remove this if watchman is not hosted on GitHub releases.
if [ -n "${GITHUB_API_TOKEN:-}" ]; then
  curl_opts=("${curl_opts[@]}" -H "Authorization: token $GITHUB_API_TOKEN")
fi

sort_versions() {
  sed 'h; s/[+-]/./g; s/.p\([[:digit:]]\)/.z\1/; s/$/.z/; G; s/\n/ /' |
    LC_ALL=C sort -t. -k 1,1 -k 2,2n -k 3,3n -k 4,4n -k 5,5n | awk '{print $2}'
}

list_github_tags() {
  git ls-remote --tags --refs "$GH_REPO" |
    grep -o 'refs/tags/.*' | cut -d/ -f3- |
    sed 's/^v//' # NOTE: You might want to adapt this sed to remove non-version strings from tags
}

list_all_versions() {
  # TODO: Adapt this. By default we simply list the tag names from GitHub releases.
  # Change this function if watchman has other means of determining installable versions.
  list_github_tags
}

get_platform() {
  local platform=""

  case "$(uname | tr '[:upper:]' '[:lower:]')" in
  darwin) platform="macos" ;;
  linux) platform="linux" ;;
  windows) platform="windows" ;;
  *)
    fail "Platform '$(uname -m)' not supported!"
    ;;
  esac

  echo -n $platform
}

download_release() {
  local version="$1"
  local filename="$2"

  echo "* Cloning Watchman v$version from source..."
  git clone --depth=1 --branch "v$version" https://github.com/facebook/watchman.git "$ASDF_DOWNLOAD_PATH"
}

ensure_build_dependencies() {
  local platform
  platform="$(uname | tr '[:upper:]' '[:lower:]')"

  echo "* Ensuring build dependencies for $platform..."

  case "$platform" in
  darwin)
    if ! command -v brew >/dev/null; then
      echo "⚠️  Homebrew is not installed. Please install it first: https://brew.sh/"
      exit 1
    fi
    brew install cmake autoconf automake libtool pcre pkg-config --quiet
    ;;
  linux)
    if command -v apt >/dev/null; then
      sudo apt update
      sudo apt install -y autoconf cmake automake libtool pkg-config libpcre3-dev
    elif command -v dnf >/dev/null; then
      sudo dnf install -y autoconf cmake automake libtool pkgconf-pkg-config pcre-devel
    elif command -v pacman >/dev/null; then
      sudo pacman -Sy --noconfirm cmake autoconf automake libtool pkgconf pcre
    else
      echo "⚠️  Unsupported Linux distro. Install the following manually:"
      echo "autoconf automake libtool pkg-config pcre (and dev headers)"
      exit 1
    fi
    ;;
  *)
    echo "❌ Unsupported platform: $platform"
    exit 1
    ;;
  esac
}

install_version() {
  local install_type="$1"
  local version="$2"
  local install_path="$3"

  if [ "$install_type" != "version" ]; then
    fail "asdf-$TOOL_NAME supports release installs only"
  fi

  echo "* Installing Watchman $version..."
  ensure_build_dependencies

  (
    cmake -S . -B build -DCMAKE_INSTALL_PREFIX="$install_path"
    cmake --build build
    cmake --install build

    local tool_cmd
    tool_cmd="$(echo "$TOOL_TEST" | cut -d' ' -f1)"
    test -x "$install_path/bin/$tool_cmd" || fail "Expected $install_path/bin/$tool_cmd to be executable."

    echo "$TOOL_NAME $version installation was successful!"
  ) || (
    rm -rf "$install_path"
    fail "An error occurred while installing $TOOL_NAME $version."
  )
}

install_version "$ASDF_INSTALL_TYPE" "$ASDF_INSTALL_VERSION" "$ASDF_INSTALL_PATH"
